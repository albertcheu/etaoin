This program (Etaoin, or Etta Owen) constructs representations of scenes of polygons AND abstracts shared properties between different scenes (pseudo-Bongard)

-Modules
  -Color recognition (directory 'color'; run trainingWindow & testingWindow)
    -Generate random RGB values
    -Show color
    -Pair triple with one or more of these:
      -Red, orange, yellow, green, blue, violet, pink, cyan
      -Black, white, gray, brown, tan
    -Partition 0-255 into blocks
    -Build decision tree

  -Space definitions (space.py)
    -left, right, top, bottom, corner, upper, lower, center, middle

  -Image generation (makeScene.py, polygon.py, space.py)
    -The file passed into makeScene1(filename) tells what the scene looks like
    -It has format:
      -Background color
      -number of shapes
      -Shape color
      -number of sides
      -Region of scene (0 is top left, 1 is top-center, ...8 is bottom right)
    -makeScene uses polygon.py to make the polygons, PIL to make the png
    -makeScene1() returns the background color & shape description list

  -Querying (interface, handlers, filters, utility, constants, grammar.cfg)
    -processes English sentences and provides appropriate responses
    -constants.py & utility.py hold handy data elements and functions
    -grammar.cfg describes the context-free grammar that is used

  -Assertion generation (gen.py, generativeGram.cfg)
    -Produces relevant statements about the scene
    -generativeGram.cfg is a smaller variant of grammar.cfg; assertions only

  -imageAnalysis.py (processImage(<filename>))
    -Given a png file, deduce what is in it (polygons, colors)
    -For now, it uses PIL to deduce the colors, not my color/ module

  -analysis.py (analyzeProblemSet(ps))
    -Use imageAnalysis to get background color and shapeDescList
    -Generate assertions (pass in the bgc and shapeDescList to gen())
    -Check each assertion using the function processWords from interface.py
    -If it is True for 'good' and False for 'bad' files, write to 'sharedTruths'

  -etta.py
    -The file that is executed (./etta.py)
    -Choose between making,deleting,analyzing problem sets
      -Dropdown menu for the last two to select the problem set
    -Making
      -Lets me input what is in the good and bad scenes
      -Dropdown menu for background color
      -For each of the 9 regions of the screen, we have dropdown menus for color and number of sides. If left blank, there is no figure there.
    -Deleting
      -rm -r <the problem set directory>
      -Rename the subsequent problem sets (decrement the numbers)
    -Analyze
      -Call analyzeProblemSet from analysis.py on the directory

  -TO DO
    -Improve color/ module (performs poorly: false positives, false negatives)
    -Find way to move the polygons, "untethering" them from the sceneInputs