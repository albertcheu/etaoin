-Ideally, this project will be able to construct representations of scenes of polygons AND abstract shared properties between different scenes (pseudo-Bongard)

-Modules
  -Color recognition (directory 'color'; run trainingWindow & testingWindow)
    -Generate random RGB values
    -Show color
    -Pair triple with one or more of these:
      -Red, orange, yellow, green, blue, violet, pink, cyan
      -Black, white, gray, brown, tan
    -Partition 0-255 into blocks
    -Build decision tree

  -Space definitions (space.py)
    -left, right, top, bottom, corner, upper, lower, center, middle

  -Image generation (makeScene.py makes scene.png; polygon.py, space.py)
    -The file passed into makeScene1(filename) tells what the scene looks like
    -It has format:
      -Background color
      -number of shapes
      -Shape color
      -number of sides
      -Region of scene (0 is top left, 1 is top-center, ...8 is bottom right)
    -makeScene uses polygon.py to make the polygons, PIL to make the png
    -makeScene1() returns the background color & shape description list

  -Querying (interface, handlers, filters, utility, constants, grammar.cfg)
    -processes English sentences and provides appropriate responses
    -constants.py & utility.py hold handy data elements and functions
    -grammar.cfg describes the context-free grammar that is used

  -Assertion generation (gen.py, generativeGram.cfg)
    -Produces relevant statements about the scene
    -generativeGram.cfg is a smaller variant of grammar.cfg; assertions only

  -Main file (etta.py)
    -Calls makeScene on sceneInput
    -Generate assertions (pass in the bgc and shapeDescList to gen())
    -Check each assertion using the function processWords from interface.py
    -If it is True for 'good' and False for 'bad' files, write to 'sharedTruths'

  -TO DO
    -GUI to input background color, polygon color and location
      -It is tedious to enter good(1-6) and bad(1-6) manually!
      -Select bgc, no. of objects
      -Nine slots. Each slot has color, no. sides, and location drop-down menu
      -Select button at bottom
        -If there is an error, raise a prompt window and do not exit
	  -Errors: two objects in same region, object same color as bgc
	  -Also, number of complete entries doesn't match entered number
        -Otherwise, pass the values into makeScene1()
    -Make analyzeScene work: produce bgc, shapeDescList from png alone
    -Find way to move the polygons, "untethering" them from the sceneInputs